searchState.loadedDescShard("linfa_trees", 0, "Decision tree learning\nA fitted decision tree model for classification.\nThe set of hyperparameters that can be specified for …\nMeasures the entropy of a subtree, defined as the sum over …\nContains the error value\nMeasures the degree of probability of a randomly chosen …\nLevel-order (BFT) iterator of nodes in a decision tree\nContains the success value\nThe metric used to determine the feature by which a node …\nStruct to print a fitted decision tree in Tex using tikz …\nA node in the decision tree\nReturns both children, first left then right\nWhether a complete Tex document should be generated\nReturns the depth of the node in the decision tree\nGenerates a <code>Tikz</code> structure to print the fitted tree in Tex …\nReturn the feature importance, i.e. the relative impurity …\nReturns the name of the feature used in the split if the …\nReturn features_idx of this tree (BFT)\nFit a decision tree using <code>hyperparamters</code> on the dataset …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the node has no children\nCreate a node iterator in level-order (BFT)\nReturn max depth of the tree\nSets the optional limit to the depth of the decision tree\nReturn the mean impurity decrease for each feature\nSets the minimum decrease in impurity that a split needs …\nSets the minimum weight of samples that a split has to …\nSets the minimum weight of samples required to split a …\nCreates a new Tikz structure for the decision tree with …\nReturn the number of leaves in this tree\nDefaults are provided if the optional parameters are not …\nMake predictions for each row of a matrix of features <code>x</code>.\nReturns <code>Some(prediction)</code> for leaf nodes and <code>None</code> for …\nReturn the relative impurity decrease for each feature\nReturn root node of the tree\nReturn the split (feature index, value) and its impurity …\nSets the metric used to decide the feature on which to …\nAdd a legend to the generated tree")