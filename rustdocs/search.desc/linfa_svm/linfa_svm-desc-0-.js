searchState.loadedDescShard("linfa_svm", 0, "Support Vector Machines\nReason for stopping\nFitted Support Vector Machines model\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of support vectors\nSums the inner product of <code>sample</code> and every one of the …\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSVM Hyperparameters\nSet the C value for regression and solver epsilon stopping …\nSet the C value and optionnaly an epsilon value used in …\nSet stopping condition\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the model to use the Gaussian kernel. For this kernel …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the model to use the Linear kernel. For this kernel …\nCreate hyper parameter set\nSet the Nu value for regression and solver epsilon …\nSet the Nu and optionally a C value (default 1.) for …\nSet the Nu value for classification\nSets the model to use the Polynomial kernel. For this …\nSet the C value for positive and negative samples.\nShrink active variable set\nSet the kernel to use for training\nSet the platt params for probability calibration\nParameters of the solver routine\nCurrent state of the SMO solver\nReturn the k-th bound\nStopping condition\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn max and min gradients of free variables\nReturn number of active variables\nInitialize a solver state\nReturn number of total variables\nSelect optimal working set\nSelect optimal working set\nShould we shrink, e.g. ignore bounded alphas\nSwap two variables\nReturn target as positive/negative indicator")